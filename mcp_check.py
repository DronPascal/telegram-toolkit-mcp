#!/usr/bin/env python3
"""
MCP Streamable HTTP Checker –¥–ª—è Telegram Toolkit MCP
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–ª–Ω—ã–π MCP –ø—Ä–æ—Ç–æ–∫–æ–ª —Å –Ω–∞—à–∏–º–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏
"""

import argparse
import json
import sys
import time
from typing import Optional, Dict, Any
import requests


DEFAULT_PROTO = "2025-06-18"


def first_sse_json(resp: requests.Response) -> Optional[Dict[str, Any]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π JSON-–æ–±—ä–µ–∫—Ç –∏–∑ SSE –ø–æ—Ç–æ–∫–∞ (—Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'data: ').
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç application/json ‚Äî –≤–µ—Ä–Ω—ë—Ç resp.json().
    """
    ctype = (resp.headers.get("Content-Type") or "").lower()
    if "text/event-stream" in ctype:
        for line in resp.iter_lines(decode_unicode=True):
            if not line:
                continue
            # –í–æ–∑–º–æ–∂–Ω—ã –∫–∞–¥—Ä—ã 'event: ...', 'id: ...', 'retry: ...'
            if line.startswith("data:"):
                payload = line[5:].strip()
                if payload:
                    return json.loads(payload)
        return None
    # fallback ‚Äî –æ–±—ã—á–Ω—ã–π JSON
    return resp.json() if resp.content else None


class MCPChecker:
    """MCP Streamable HTTP Checker –¥–ª—è –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""

    def __init__(self, base_url: str, proto: str = DEFAULT_PROTO, timeout: int = 60, debug: bool = False):
        self.base_url = base_url.rstrip("/")  # .../mcp
        self.proto = proto
        self.sess = requests.Session()
        self.sid: Optional[str] = None
        self.timeout = timeout
        self.debug = debug

    def _headers(self, with_sid: bool = True) -> Dict[str, str]:
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è MCP –∑–∞–ø—Ä–æ—Å–æ–≤"""
        headers = {
            "Content-Type": "application/json",
            "Accept": "application/json, text/event-stream",
            "MCP-Protocol-Version": self.proto,
        }
        if with_sid and self.sid:
            headers["Mcp-Session-Id"] = self.sid
        return headers

    def initialize(self, client_name: str = "mcp-checker", client_version: str = "0.1") -> Optional[Dict[str, Any]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MCP —Å–µ—Å—Å–∏–∏"""
        payload = {
            "jsonrpc": "2.0",
            "id": 0,
            "method": "initialize",
            "params": {
                "protocolVersion": self.proto,
                "capabilities": {"tools": {}},
                "clientInfo": {"name": client_name, "version": client_version},
            },
        }

        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ initialize..." if self.debug else "", end="", flush=True)

        resp = self.sess.post(
            self.base_url, json=payload, headers=self._headers(with_sid=False),
            timeout=self.timeout, stream=True
        )
        resp.raise_for_status()

        # SID –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –æ—Ç–≤–µ—Ç–∞
        sid = resp.headers.get("Mcp-Session-Id") or resp.headers.get("mcp-session-id")
        if not sid:
            print("‚ö†Ô∏è  Warning: initialize –æ–∫, –Ω–æ —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª Mcp-Session-Id", file=sys.stderr)
        else:
            self.sid = sid.strip()

        result = first_sse_json(resp)
        if self.debug:
            print("INIT headers:", dict(resp.headers), file=sys.stderr)
            print("INIT body:", result, file=sys.stderr)

        return result

    def notify_initialized(self) -> int:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ notifications/initialized"""
        payload = {"jsonrpc": "2.0", "method": "notifications/initialized"}

        print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ notifications/initialized..." if self.debug else "", end="", flush=True)

        resp = self.sess.post(
            self.base_url, json=payload, headers=self._headers(),
            timeout=self.timeout, stream=True
        )

        if self.debug:
            print(f"NOTIFY status: {resp.status_code}", file=sys.stderr)

        return resp.status_code

    def rpc(self, method: str, params: Optional[Dict[str, Any]] = None, rid: int = 1) -> Optional[Dict[str, Any]]:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞"""
        payload = {"jsonrpc": "2.0", "id": rid, "method": method}
        if params is not None:
            payload["params"] = params

        print(f"üì° RPC {method}..." if self.debug else "", end="", flush=True)

        resp = self.sess.post(
            self.base_url, json=payload, headers=self._headers(),
            timeout=self.timeout, stream=True
        )
        resp.raise_for_status()

        data = first_sse_json(resp)
        if self.debug:
            print(f"RPC {method} ‚Üí {data}", file=sys.stderr)

        return data

    def tools_list(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"""
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±–µ–∑ params
            return self.rpc("tools/list", rid=2)
        except requests.HTTPError:
            # –ï—Å–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º —Å –ø—É—Å—Ç—ã–º–∏ params
            return self.rpc("tools/list", params={}, rid=2)

    def call_tool(self, name: str, arguments: Dict[str, Any], rid: int = 3) -> Optional[Dict[str, Any]]:
        """–í—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞"""
        return self.rpc("tools/call", {"name": name, "arguments": arguments}, rid=rid)


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    ap = argparse.ArgumentParser(description="MCP Streamable HTTP checker –¥–ª—è Telegram Toolkit")
    ap.add_argument("--domain", default="tgtoolkit.azazazaza.work", help="–î–æ–º–µ–Ω MCP —Å–µ—Ä–≤–µ—Ä–∞")
    ap.add_argument("--scheme", default="https", choices=["http", "https"])
    ap.add_argument("--path", default="/mcp", help="–ü—É—Ç—å —ç–Ω–¥–ø–æ–π–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /mcp)")
    ap.add_argument("--proto", default=DEFAULT_PROTO, help="MCP-Protocol-Version")
    ap.add_argument("--chat", default="@telegram", help="–ß–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –≤—ã–∑–æ–≤–∞")
    ap.add_argument("--timeout", type=int, default=60, help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
    ap.add_argument("--debug", action="store_true", help="–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏")
    ap.add_argument("--call", choices=["none", "resolve", "fetch"], default="resolve",
                    help="–ö–∞–∫–æ–π tools/call –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ—Å–ª–µ tools/list")
    args = ap.parse_args()

    base_url = f"{args.scheme}://{args.domain}{args.path}"
    print(f"üöÄ MCP Checker –¥–ª—è: {base_url}")
    print("=" * 60)

    chk = MCPChecker(base_url, proto=args.proto, timeout=args.timeout, debug=args.debug)

    # 1. Initialize
    print("1Ô∏è‚É£  Initialize...")
    start_time = time.time()
    init = chk.initialize()
    init_time = time.time() - start_time

    if not chk.sid:
        print("‚ùå –ù–µ—Ç Mcp-Session-Id ‚Äî —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        sys.exit(2)

    print(f"   ‚úÖ SID: {chk.sid}")
    print(f"   ‚è±Ô∏è  Initialize time: {init_time:.2f}s")
    print(f"   üìã Server info: {init.get('result', {}).get('serverInfo', {}) if init else 'N/A'}")

    # 2. Notifications
    print("\n2Ô∏è‚É£  Notifications/initialized...")
    start_time = time.time()
    code = chk.notify_initialized()
    notify_time = time.time() - start_time

    if code in [200, 202, 204]:
        print(f"   ‚è±Ô∏è  Notifications time: {notify_time:.2f}s")
    else:
        print(f"   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {code}")

    # 3. Tools list
    print("\n3Ô∏è‚É£  Tools/list...")
    start_time = time.time()
    tlist = chk.tools_list()
    list_time = time.time() - start_time

    if tlist and "result" in tlist:
        tools = tlist["result"].get("tools", [])
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
        for i, tool in enumerate(tools, 1):
            print(f"      {i}. {tool.get('name', 'Unknown')}")
            if args.debug:
                print(f"         üìù {tool.get('description', 'No description')[:100]}...")
    else:
        print("   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤")
        if tlist:
            print(f"   üìã –û—Ç–≤–µ—Ç: {tlist}")

    # 4. Tool call (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if args.call != "none" and tlist:
        print(f"\n4Ô∏è‚É£  Tools/call: {args.call}...")

        if args.call == "resolve":
            print(f"   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º resolve_chat_tool —Å —á–∞—Ç–æ–º: {args.chat}")
            start_time = time.time()
            res = chk.call_tool("resolve_chat_tool", {"input": args.chat}, rid=10)
            call_time = time.time() - start_time

            if res and "result" in res:
                print(f"   ‚è±Ô∏è  Tool call time: {call_time:.2f}s")
                if args.debug:
                    print(f"   üìã –†–µ–∑—É–ª—å—Ç–∞—Ç: {json.dumps(res['result'], ensure_ascii=False, indent=2)}")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ resolve_chat_tool")
                if res and "error" in res:
                    print(f"   üìã –û—à–∏–±–∫–∞: {res['error']}")

        elif args.call == "fetch":
            print(f"   üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º fetch_history_tool —Å —á–∞—Ç–æ–º: {args.chat}")
            start_time = time.time()
            res = chk.call_tool("fetch_history_tool", {"chat_id": args.chat, "limit": 3}, rid=11)
            call_time = time.time() - start_time

            if res and "result" in res:
                messages = res["result"].get("messages", [])
                print(f"   ‚è±Ô∏è  Tool call time: {call_time:.2f}s")
                if args.debug:
                    print(f"   üìã –°–æ–æ–±—â–µ–Ω–∏—è: {len(messages)}")
                    for msg in messages[:2]:  # –ü–æ–∫–∞–∂–µ–º –ø–µ—Ä–≤—ã–µ 2
                        print(f"      ‚Ä¢ {msg.get('text', 'N/A')[:50]}...")
            else:
                print("   ‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ fetch_history_tool")
                if res and "error" in res:
                    print(f"   üìã –û—à–∏–±–∫–∞: {res['error']}")
    else:
        call_time = 0

    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("=" * 60)
    print(f"   ‚è±Ô∏è  Initialize: {init_time:.2f}s")
    print(f"   ‚è±Ô∏è  Notifications: {notify_time:.2f}s")
    print(f"   ‚è±Ô∏è  Tools list: {list_time:.2f}s")
    if args.call != "none":
        print(f"   ‚è±Ô∏è  Tool call: {call_time:.2f}s")

    print("
üìã –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:"
    if tlist and "result" in tlist:
        tools = tlist["result"].get("tools", [])
        print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {len(tools)}")
        for tool in tools:
            name = tool.get('name', 'Unknown')
            print(f"      ‚Ä¢ {name}")
    else:
        print("   ‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã")

    print("
üéØ –°–¢–ê–¢–£–°:"
    success = (
        chk.sid is not None and
        code in [200, 202, 204] and
        (tlist is not None and "result" in tlist)
    )

    if success:
        print("   ‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("   üéâ MCP —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    else:
        print("   ‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        sys.exit(1)


if __name__ == "__main__":
    try:
        main()
    except requests.HTTPError as e:
        # –ü–µ—á–∞—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —É–¥–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏
        if e.response is not None:
            sys.stderr.write(f"\nHTTPError {e.response.status_code}: {e.response.text}\n")
        raise
    except KeyboardInterrupt:
        print("\n‚ùå –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if "--debug" in sys.argv:
            import traceback
            traceback.print_exc()
        sys.exit(1)
