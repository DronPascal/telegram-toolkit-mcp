#!/usr/bin/env python3
"""
Script to run all integration and E2E tests with proper PYTHONPATH setup.
"""

import os
import sys
from pathlib import Path

# Add src directory to Python path
src_path = Path(__file__).parent / "src"
sys.path.insert(0, str(src_path))

# Set environment variables for testing
os.environ.setdefault("DEBUG", "true")
os.environ.setdefault("LOG_LEVEL", "INFO")


def check_dependencies():
    """Check if required dependencies are available."""
    import importlib.util

    missing_deps = []

    if importlib.util.find_spec("mcp") is None:
        missing_deps.append("mcp")

    if importlib.util.find_spec("telethon") is None:
        missing_deps.append("telethon")

    if importlib.util.find_spec("httpx") is None:
        missing_deps.append("httpx")

    return missing_deps


if __name__ == "__main__":
    # Import and run pytest
    import subprocess
    import sys

    print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–• –ò E2E –¢–ï–°–¢–û–í...")
    print("=" * 80)

    # Check dependencies
    missing_deps = check_dependencies()
    if missing_deps:
        print(f"‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–´ –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ó–ê–í–ò–°–ò–ú–û–°–¢–ò: {', '.join(missing_deps)}")
        print("üì¶ E2E —Ç–µ—Å—Ç—ã –º–æ–≥—É—Ç –Ω–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –±–µ–∑ —ç—Ç–∏—Ö –ø–∞–∫–µ—Ç–æ–≤")
        print("-" * 50)

    # Run integration tests
    print("\nüìã –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ï –¢–ï–°–¢–´:")
    print("-" * 40)
    result_integration = subprocess.run(
        [sys.executable, "-m", "pytest", "tests/integration/", "--tb=short", "-v", "-q"],
        check=False,
    )

    print(f"\nIntegration tests exit code: {result_integration.returncode}")

    # Run E2E tests
    print("\nüìã E2E –¢–ï–°–¢–´:")
    print("-" * 40)

    if "mcp" in missing_deps or "telethon" in missing_deps:
        print("‚ö†Ô∏è  –ü–†–û–ü–£–°–ö E2E –¢–ï–°–¢–û–í: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏")
        print(f"   –¢—Ä–µ–±—É—é—Ç—Å—è: {', '.join(missing_deps)}")
        result_e2e = type("MockResult", (), {"returncode": 2})()
    else:
        result_e2e = subprocess.run(
            [sys.executable, "-m", "pytest", "tests/e2e/", "--tb=short", "-v", "-q"], check=False
        )

    print(f"\nE2E tests exit code: {result_e2e.returncode}")

    # Summary
    print("\n" + "=" * 80)
    print("üìä –ü–û–î–†–û–ë–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")

    if result_integration.returncode == 0:
        print("‚úÖ Integration tests: PASSED")
    else:
        print("‚ùå Integration tests: FAILED")

    if "mcp" in missing_deps or "telethon" in missing_deps:
        print("‚è≠Ô∏è  E2E tests: SKIPPED (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)")
    elif result_e2e.returncode == 0:
        print("‚úÖ E2E tests: PASSED")
    else:
        print("‚ùå E2E tests: FAILED")

    print("\n" + "-" * 50)
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ï–°–¢–ê–ú:")

    # Overall result
    if result_integration.returncode == 0 and (
        "mcp" not in missing_deps and "telethon" not in missing_deps and result_e2e.returncode == 0
    ):
        overall_status = "PASSED"
        overall_exit_code = 0
    elif result_integration.returncode == 0:
        overall_status = "PARTIAL SUCCESS"
        overall_exit_code = 0
    else:
        overall_status = "FAILED"
        overall_exit_code = 1

    print(f"üéØ OVERALL: {overall_status}")

    if missing_deps:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print(f"   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã: pip install {' '.join(missing_deps)}")
        print("   ‚Ä¢ –ò–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã: pytest tests/integration/")
        print("   ‚Ä¢ E2E —Ç–µ—Å—Ç—ã —Ç—Ä–µ–±—É—é—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö Telegram credentials")

    print(f"\nüîö –í–´–•–û–î –° –ö–û–î–û–ú: {overall_exit_code}")
    sys.exit(overall_exit_code)
