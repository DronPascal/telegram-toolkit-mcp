services:
  telegram-mcp:
    build: .
    container_name: telegram-toolkit-mcp
    restart: unless-stopped
    ports:
      - "0.0.0.0:8000:8000"  # FastMCP server with all endpoints
    environment:
      # Required: Add your Telegram API credentials
      - TELEGRAM_API_ID=${TELEGRAM_API_ID}
      - TELEGRAM_API_HASH=${TELEGRAM_API_HASH}
      - TELEGRAM_STRING_SESSION=${TELEGRAM_STRING_SESSION}

      # Server configuration
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
      - MCP_SERVER_LOG_LEVEL=INFO

      # Performance tuning
      - FLOOD_SLEEP_THRESHOLD=60
      - REQUEST_TIMEOUT=30
      - MAX_PAGE_SIZE=100

      # Resource management
      - TEMP_DIR=/tmp/mcp-resources
      - RESOURCE_MAX_AGE_HOURS=24
      - NDJSON_CHUNK_SIZE=1000

      # Observability
      - ENABLE_PROMETHEUS_METRICS=true
      - ENABLE_OPENTELEMETRY_TRACING=false  # Set to true if you have OTLP collector
      - OTLP_ENDPOINT=http://otel-collector:4318

      # Development
      - DEBUG=false
      - LOG_FORMAT=json

    volumes:
      # Persist Telegram session
      - ./data:/app/data
      # Persist resources
      - ./resources:/tmp/mcp-resources

    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: OpenTelemetry Collector for tracing
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: otel-collector
    restart: unless-stopped
    ports:
      - "4318:4318"   # OTLP gRPC
      - "4319:4319"   # OTLP HTTP
      - "55679:55679" # Prometheus metrics
    volumes:
      - ./otel-config.yaml:/etc/otel/config.yaml
    profiles:
      - observability

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    profiles:
      - observability

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    profiles:
      - observability

volumes:
  grafana_data:
