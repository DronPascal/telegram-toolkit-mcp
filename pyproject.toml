[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "telegram-toolkit-mcp"
version = "0.1.0"
description = "MCP server for Telegram message history extraction"
authors = [
    {name = "Telegram Toolkit MCP Team", email = "team@telegram-toolkit-mcp.dev"}
]
license = {text = "Apache"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["mcp", "telegram", "api", "messages", "extraction"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache 2.0 License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Communications :: Chat",
    "Topic :: Software Development :: Libraries",
    "Topic :: System :: Archiving",
]

dependencies = [
    # MCP SDK
    "mcp>=1.0.0",

    # Telegram client
    "telethon>=1.36.0",

    # Data validation and models
    "pydantic>=2.0.0",

    # JSON processing
    "orjson>=3.9.0",

    # Async utilities
    "asyncio-mqtt>=0.13.0",  # For potential MQTT integration

    # HTTP client for resources
    "httpx>=0.25.0",

    # OpenTelemetry for distributed tracing
    "opentelemetry-distro>=0.46b0",
    "opentelemetry-instrumentation>=0.46b0",
    "opentelemetry-instrumentation-fastapi>=0.46b0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.25.0",
    "opentelemetry-exporter-otlp-proto-http>=1.25.0",
    "opentelemetry-exporter-jaeger>=1.21.0",

    # Configuration
    "python-dotenv>=1.0.0",

    # Performance monitoring
    "psutil>=5.9.0",

    # Monitoring and metrics
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.80.0",

    # Code quality
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "black>=23.0.0",
    "isort>=5.12.0",

    # Pre-commit
    "pre-commit>=3.5.0",

    # Documentation
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",

    # Development tools
    "jupyter>=1.0.0",
]

observability = [
    # Metrics
    "prometheus-client>=0.19.0",

    # Tracing
    "opentelemetry-distro>=0.45b0",
    "opentelemetry-exporter-otlp>=1.24.0",
    "opentelemetry-instrumentation>=0.45b0",
]

[project.scripts]
telegram-mcp-server = "telegram_toolkit_mcp.server:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["telegram_toolkit_mcp*"]

[tool.setuptools.package-data]
telegram_toolkit_mcp = ["py.typed"]

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = ["E", "F", "I", "UP", "PL", "ASYNC", "BLE", "SIM", "NPY"]
ignore = ["E501"]  # Line too long, let black handle this

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Unused imports in __init__.py files
"tests/*" = ["PLR2004"]  # Magic values in tests

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "telethon.*",
    "mcp.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.4"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=telegram_toolkit_mcp",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow running tests",
    "telegram: Tests requiring Telegram API",
]

# Coverage configuration
[tool.coverage.run]
source = ["telegram_toolkit_mcp"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*Protocol):",
    "@(abc.)?abstractmethod",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ["py311"]
include = "\\.pyi?$"
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
