#!/usr/bin/env python3
"""
Advanced MCP Client Test using FastMCP library
"""

import asyncio
import json
import sys
from typing import Any

try:
    import fastmcp
    import httpx
    from fastmcp import Client
except ImportError as e:
    print(f"‚ùå Missing dependencies: {e}")
    print("Run: pip install httpx fastmcp")
    sys.exit(1)


def safe_parse_json(text: str) -> Any:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–∞—Ä—Å–∏—Ç JSON –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç"""
    try:
        return json.loads(text)
    except json.JSONDecodeError:
        return text


async def test_mcp_server():
    """–ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MCP —Å–µ—Ä–≤–µ—Ä–∞ —Å FastMCP –∫–ª–∏–µ–Ω—Ç–æ–º"""

    server_url = "https://tgtoolkit.azazazaza.work/mcp"

    print("üöÄ Advanced MCP Client Test")
    print("=" * 60)
    print(f"üéØ Server URL: {server_url}")

    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ FastMCP
        print("\nü§ñ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É...")
        client = Client(server_url)

        async with client:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n")

            # –ü–æ–ª—É—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
            print("üîç –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ...")

            try:
                tools = await client.list_tools()
                print(f"üîß –î–æ—Å—Ç—É–ø–Ω–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {len(tools)}")
                for i, tool in enumerate(tools, 1):
                    print(f"   {i}. {tool.name}: {tool.description}")

            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤: {e}")
                tools = []

            try:
                resources = await client.list_resources()
                print(f"\nüìö –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(resources)}")
                for i, resource in enumerate(resources, 1):
                    print(f"   {i}. {resource.uri}")

            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
                resources = []

            try:
                prompts = await client.list_prompts()
                print(f"\nüí≠ –î–æ—Å—Ç—É–ø–Ω–æ –ø—Ä–æ–º–ø—Ç–æ–≤: {len(prompts)}")
                for i, prompt in enumerate(prompts, 1):
                    print(f"   {i}. {prompt.name}: {prompt.description}")

            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤: {e}")
                prompts = []

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
            print("\nüß™ –¢–ï–°–¢–ò–†–£–ï–ú –ò–ù–°–¢–†–£–ú–ï–ù–¢–´:")
            print("-" * 50)

            if tools:
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                tool = tools[0]
                print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool.name}")
                print(f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {tool.description}")

                # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                if hasattr(tool, "inputSchema") and tool.inputSchema:
                    print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {json.dumps(tool.inputSchema, indent=2)}")

                # –ü—Ä–æ–±—É–µ–º –≤—ã–∑–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                test_args = {}

                # –î–ª—è Telegram –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
                if "fetch_history" in tool.name:
                    test_args = {
                        "chat_id": "@telegram",  # –ü—É–±–ª–∏—á–Ω—ã–π —á–∞—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        "limit": 1,
                    }
                elif "resolve_chat" in tool.name:
                    test_args = {"input": "@telegram"}

                if test_args:
                    try:
                        print(f"üì§ –í—ã–∑—ã–≤–∞–µ–º —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏: {test_args}")
                        result = await client.call_tool(tool.name, test_args)
                        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                        print(f"   {safe_parse_json(result)}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
                        print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –Ω—É–∂–Ω—ã –≤–∞–ª–∏–¥–Ω—ã–µ Telegram credentials")
                else:
                    print("‚ÑπÔ∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã–∑–æ–≤ - –Ω—É–∂–Ω—ã —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")

            else:
                print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")

            print("\n" + "=" * 60)
            print("üéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
            print("=" * 60)

            # –ò—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            success_count = sum([1 if tools else 0, 1 if resources else 0, 1 if prompts else 0])

            print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
            print("   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É: –£–°–ü–ï–®–ù–û")
            print("   ‚úÖ MCP –ø—Ä–æ—Ç–æ–∫–æ–ª: –†–ê–ë–û–¢–ê–ï–¢")
            print("   ‚úÖ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: –£–°–¢–ê–ù–û–í–õ–ï–ù–û")
            print("   ‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: –î–ê")

            if success_count > 0:
                print(f"   ‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: {success_count}/3 —Ä–∞–±–æ—Ç–∞—é—Ç")
            else:
                print("   ‚ö†Ô∏è  –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   ‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL")
        print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º")
        print("   ‚Ä¢ FastMCP –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞")

        import traceback

        print(f"\nüîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:\n{traceback.format_exc()}")


async def simple_http_test():
    """–ü—Ä–æ—Å—Ç–æ–π HTTP —Ç–µ—Å—Ç –±–µ–∑ FastMCP"""
    print("\nüåê –ü—Ä–æ—Å—Ç–æ–π HTTP —Ç–µ—Å—Ç (–±–µ–∑ FastMCP):")

    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º health endpoint
            response = await client.get("https://tgtoolkit.azazazaza.work/health")
            print(f"   Health: {response.status_code} - {response.text[:100]}...")

            # –¢–µ—Å—Ç–∏—Ä—É–µ–º metrics endpoint
            response = await client.get("https://tgtoolkit.azazazaza.work/metrics")
            print(f"   Metrics: {response.status_code} - {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤")

    except Exception as e:
        print(f"   ‚ùå HTTP —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {e}")


if __name__ == "__main__":
    print("üß™ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø MCP –°–ï–†–í–ï–†–ê")
    print("üöÄ –ò—Å–ø–æ–ª—å–∑—É–µ–º FastMCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è SSE")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTTP —Ç–µ—Å—Ç
    asyncio.run(simple_http_test())

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π MCP —Ç–µ—Å—Ç
    asyncio.run(test_mcp_server())

    print("\n" + "üéØ" * 60)
    print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
    print("üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ MCP Inspector –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("üéØ" * 60)
